#!/bin/bash
#
# Monolithic Performance Tuning & Hardening Script for Debian-based Systems
#
# This self-contained script applies system-wide performance tuning and optional
# SSH hardening. It is designed to be fully interactive and idempotent.
# It includes fixes for interactivity and variable assignment.
#
# Usage:
#   - Interactive Install: sudo bash -c "$(curl -sSL <URL_TO_SCRIPT>)"
#   - Uninstall:         sudo bash -c "$(curl -sSL <URL_TO_SCRIPT>)" -s -- --uninstall
#

set -euo pipefail

# --- Pre-flight Checks & Setup ---

check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "Error: This script must be run as root. Please use sudo." >&2
        exit 1
    fi
}

check_dependencies() {
    if ! command -v ethtool >/dev/null 2>&1 || ! command -v ip >/dev/null 2>&1; then
        echo "Notice: Required tools (ethtool, iproute2) not found."
        read -rp "Attempt to install them via apt? [Y/n]: " choice
        if [[ ! "$choice" =~ ^[Nn]$ ]]; then
            echo "Installing dependencies..."
            apt-get update
            apt-get install -y ethtool iproute2
        else
            echo "Error: Dependencies are required to proceed." >&2
            exit 1
        fi
    fi
}

# --- Profile Definitions ---
# Each function defines the tuning parameters for a specific profile.

set_profile_auto() {
    echo "Selected Profile: auto (Balanced BBR)"
    export TCP_CC="bbr"
    export QDISC="fq"
    export SYSCTL_SETTINGS=(
        "net.core.netdev_max_backlog=32768"
        "net.core.somaxconn=16384"
        "net.ipv4.tcp_mtu_probing=1"
    )
}

set_profile_lan_low_latency() {
    echo "Selected Profile: lan_low_latency (Optimized for low delay)"
    export TCP_CC="cubic"
    export QDISC="fq_codel"
    export SYSCTL_SETTINGS=(
        "net.ipv4.tcp_low_latency=1"
        "net.ipv4.tcp_wmem='4096 16384 4194304'"
        "net.ipv4.tcp_rmem='4096 87380 6291456'"
        "net.core.netdev_max_backlog=16384"
        "net.core.somaxconn=8192"
    )
}

set_profile_wan_throughput() {
    echo "Selected Profile: wan_throughput (Optimized for bulk transfer)"
    export TCP_CC="bbr"
    export QDISC="fq"
    export SYSCTL_SETTINGS=(
        "net.core.rmem_max=16777216"
        "net.core.wmem_max=16777216"
        "net.ipv4.tcp_rmem='4096 131072 16777216'"
        "net.ipv4.tcp_wmem='4096 16384 16777216'"
        "net.ipv4.tcp_mtu_probing=1"
        "net.core.netdev_max_backlog=32768"
        "net.core.somaxconn=16384"
    )
}

set_profile_datacenter_10g() {
    echo "Selected Profile: datacenter_10g (Aggressive 10G+ tuning)"
    export TCP_CC="bbr"
    export QDISC="fq"
    export SYSCTL_SETTINGS=(
        "net.core.rmem_max=33554432"
        "net.core.wmem_max=33554432"
        "net.ipv4.tcp_rmem='4096 262144 33554432'"
        "net.ipv4.tcp_wmem='4096 32768 33554432'"
        "net.core.netdev_max_backlog=65536"
        "net.core.somaxconn=65536"
        "net.ipv4.tcp_timestamps=1"
        "net.ipv4.tcp_fastopen=3"
    )
}

# --- Core Logic Functions ---

apply_sysctl() {
    echo "Applying sysctl settings..."
    mkdir -p /etc/sysctl.d

    cat > /etc/sysctl.d/99-perf-base.conf <<'EOF'
# Static base performance and security settings
vm.swappiness=10
kernel.kptr_restrict=2
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0
EOF

    CONF_FILE="/etc/sysctl.d/98-perf-profile.conf"
    echo "# Generated by tuning script for profile: $PROFILE" > "$CONF_FILE"
    echo "net.core.default_qdisc = ${QDISC}" >> "$CONF_FILE"
    echo "net.ipv4.tcp_congestion_control = ${TCP_CC}" >> "$CONF_FILE"
    for setting in "${SYSCTL_SETTINGS[@]}"; do
        echo "$setting" >> "$CONF_FILE"
    done

    sysctl --system >/dev/null
}

apply_nic_tuning() {
    echo "Applying NIC tuning..."
    mkdir -p /usr/local/sbin /etc/default
    echo "PROFILE=${PROFILE}" > /etc/default/perf-tuning

    cat > /usr/local/sbin/tune-nic.sh <<'EOF'
#!/bin/bash
set -eu
if [ -f /etc/default/perf-tuning ]; then source /etc/default/perf-tuning; fi
PROFILE=${PROFILE:-auto}
log() { echo "[tune-nic] $*"; }
declare -A PROFILES
PROFILES["lan_low_latency"]="adaptive-rx off;adaptive-tx off;rx-usecs 50;tx-usecs 50"
PROFILES["datacenter_10g"]="adaptive-rx on;adaptive-tx on"
PROFILES["auto"]="adaptive-rx on;adaptive-tx on"
PROFILES["wan_throughput"]="adaptive-rx on;adaptive-tx on"
tune_one() {
    local ifc="$1"
    log "Tuning interface: $ifc with profile: $PROFILE"
    local settings=${PROFILES[$PROFILE]}
    IFS=';' read -ra setting_pairs <<< "$settings"
    for pair in "${setting_pairs[@]}"; do
        ethtool -C "$ifc" $pair >/dev/null 2>&1 || log "WARN: Could not set '$pair' on $ifc"
    done
    if [ "$PROFILE" = "datacenter_10g" ]; then
        read -r max_rx max_tx < <(ethtool -g "$ifc" | awk '/^RX:/{rx=$2} /^TX:/{tx=$2} END{print rx, tx}')
        if [[ -n "$max_rx" && -n "$max_tx" ]]; then
            log "Setting $ifc ring buffers to MAX (RX=$max_rx, TX=$max_tx)"
            ethtool -G "$ifc" rx "$max_rx" tx "$max_tx" >/dev/null 2>&1 || log "WARN: Could not set ring buffers on $ifc"
        fi
    fi
}
for ifc in $(ls -1 /sys/class/net | grep -E '^(en|eth)'); do
    [ "$(cat /sys/class/net/${ifc}/operstate)" == "up" ] && tune_one "$ifc"
done
EOF
    chmod +x /usr/local/sbin/tune-nic.sh

    cat > /etc/systemd/system/tune-nic.service <<'EOF'
[Unit]
Description=Apply NIC Hardware Tuning
After=network-online.target
Wants=network-online.target
[Service]
Type=oneshot
ExecStart=/usr/local/sbin/tune-nic.sh
[Install]
WantedBy=multi-user.target
EOF

    /usr/local/sbin/tune-nic.sh
}

apply_limits() {
    echo "Applying security limits (ulimit)..."
    mkdir -p /etc/security/limits.d
    cat > /etc/security/limits.d/99-perf.conf <<'EOF'
* soft nofile 1048576
* hard nofile 1048576
root soft nofile 1048576
root hard nofile 1048576
EOF
}

apply_ssh_hardening() {
    echo "Applying SSH hardening..."
    local conf_file="/etc/ssh/sshd_config.d/99-hardening.conf"
    mkdir -p "$(dirname "$conf_file")"
    if [ -n "$SSH_USER" ] && [ -n "$SSH_PUBKEY" ]; then
        local home_dir
        home_dir=$(getent passwd "$SSH_USER" | cut -d: -f6)
        local auth_keys_file="$home_dir/.ssh/authorized_keys"
        echo "Adding public key to $auth_keys_file"
        mkdir -p "$home_dir/.ssh"
        chmod 700 "$home_dir/.ssh"
        if ! grep -qF "$SSH_PUBKEY" "$auth_keys_file" 2>/dev/null; then echo "$SSH_PUBKEY" >> "$auth_keys_file"; fi
        chown -R "$SSH_USER:$SSH_USER" "$home_dir/.ssh"
        chmod 600 "$auth_keys_file"
    else
        echo "Warning: No user or public key provided. Skipping key installation."
    fi

    cat > "$conf_file" <<'EOF'
# Managed by performance tuning script
Protocol 2
PasswordAuthentication no
ChallengeResponseAuthentication no
PermitRootLogin prohibit-password
KexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com
EOF

    echo "Reloading SSH service..."
    systemctl reload-or-restart ssh
}

# --- User Interaction ---

ask_questions() {
    echo "--- Performance Tuning & Hardening Installer ---"
    echo ""
    echo "Step 1: Select a Performance Profile"
    echo "----------------------------------------"
    PS3="Enter the number for your desired profile: "
    select choice in "auto (Balanced BBR)" "lan_low_latency (Low Delay)" "wan_throughput (Bulk Transfer)" "datacenter_10g (10G+ Networks)"; do
        case $choice in
            "auto (Balanced BBR)")
                PROFILE="auto" # <<< FIXED
                set_profile_auto
                break
                ;;
            "lan_low_latency (Low Delay)")
                PROFILE="lan_low_latency" # <<< FIXED
                set_profile_lan_low_latency
                break
                ;;
            "wan_throughput (Bulk Transfer)")
                PROFILE="wan_throughput" # <<< FIXED
                set_profile_wan_throughput
                break
                ;;
            "datacenter_10g (10G+ Networks)")
                PROFILE="datacenter_10g" # <<< FIXED
                set_profile_datacenter_10g
                break
                ;;
            *) echo "Invalid option. Please try again." ;;
        esac
    done

    export PROFILE

    echo ""
    echo "Step 2: SSH Hardening (Optional)"
    echo "----------------------------------------"
    read -rp "Apply SSH hardening? (Disables passwords, enforces key auth) [y/N]: " choice
    if [[ "$choice" =~ ^[Yy]$ ]]; then
        export DO_SSH_HARDEN="true"
        echo ""
        echo "You've chosen to harden SSH. A public key is required to ensure access."
        while true; do
            read -rp "Enter the username to add the public key to: " SSH_USER
            if id "$SSH_USER" &>/dev/null; then
                break
            else
                echo "Error: User '$SSH_USER' does not exist. Please try again."
            fi
        done
        echo "Paste the full SSH public key (e.g., ssh-ed25519 AAAA...):"
        read -rp "Public Key: " SSH_PUBKEY
        if [[ ! "$SSH_PUBKEY" =~ ^ssh- ]]; then
            echo "Warning: The provided text does not look like a public key."
        fi
    else
        export DO_SSH_HARDEN="false"
    fi
}

# --- Main Execution & Uninstall Logic ---

uninstall() {
    echo "Uninstalling all performance tuning and hardening configurations..."
    systemctl disable --now tune-nic.service 2>/dev/null || true
    rm -f /etc/systemd/system/tune-nic.service
    rm -f /usr/local/sbin/tune-nic.sh
    rm -f /etc/default/perf-tuning
    rm -f /etc/sysctl.d/98-perf-profile.conf
    rm -f /etc/sysctl.d/99-perf-base.conf
    rm -f /etc/security/limits.d/99-perf.conf
    rm -f /etc/ssh/sshd_config.d/99-hardening.conf
    echo "Reloading systemd, sysctl, and ssh..."
    systemctl daemon-reload
    sysctl --system >/dev/null
    systemctl reload-or-restart ssh 2>/dev/null || true
    echo "Uninstallation complete. A reboot is recommended to restore all defaults."
}

main() {
    check_root
    # The check_dependencies and ask_questions functions no longer need < /dev/tty
    # because the recommended execution method avoids the pipe issue.
    check_dependencies
    ask_questions
    echo ""
    echo "--- Applying Configurations ---"
    apply_sysctl
    apply_nic_tuning
    apply_limits
    if [ "$DO_SSH_HARDEN" = "true" ]; then
        apply_ssh_hardening
    else
        echo "Skipping SSH hardening as requested."
    fi
    echo "Reloading systemd daemon and enabling services..."
    systemctl daemon-reload
    systemctl enable --now tune-nic.service 2>/dev/null || true
    echo ""
    echo "-------------------------------------"
    echo " Installation Complete"
    echo "-------------------------------------"
    echo "Tuning has been applied and will persist across reboots."
}

# Check for --uninstall flag
if [ "${1:-}" = "--uninstall" ]; then
    check_root
    # The uninstall function needs to be able to prompt the user as well
    read -rp "Are you sure you want to remove all tuning configurations? [y/N]: " confirm
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        uninstall
    else
        echo "Aborting uninstall."
    fi
else
    main
fi

exit 0
